{"version":3,"sources":["firebase.js","Textbox.js","input.js","App.js","serviceWorker.js","index.js"],"names":["fireDb","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","Textbox","useState","text","setText","useEffect","firebaseDb","ref","once","then","snapshot","val","on","items","getRandomColor","color","i","Math","floor","random","x","divStyle","padding","margin","fontSize","push","style","id","Input","className","placeholder","onChange","e","value","target","set","input","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6PAgBeA,G,MAFFC,IAASC,cAXD,CACnBC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKKC,YCbTC,EAAU,WAAO,IAAD,EACHC,qBADG,mBACpBC,EADoB,KACdC,EADc,KAG3BC,qBAAU,WACRC,EACGC,IAAI,UACJC,KAAK,SACLC,MAAK,SAACC,GACLN,EAAQM,EAASC,UAErBL,EAAWC,IAAI,UAAUK,GAAG,SAAS,SAACF,GACpCN,EAAQM,EAASC,aAerB,IAXA,IAAME,EAAQ,GAERC,EAAiB,WAGrB,IAFA,IACIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAHY,mBAGKE,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOJ,GAGAC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAII,EAAoB,EAAhBH,KAAKE,SAAe,EACxBE,EAAW,CAEbN,MAAOD,IACPQ,QAASF,EAAI,EAAI,MACjBG,OAAQH,EAAI,KACZI,SAAUJ,EAAI,MAEhBP,EAAMY,KAAK,wBAAIC,MAAOL,GAAWlB,IAGnC,OACE,yBAAKwB,GAAG,YACN,4BAAKd,KCxCEe,EAAQ,WAOnB,OACE,yBAAKD,GAAG,SACN,2BAAOE,UAAU,QAAQC,YAAY,YAAYC,SAAU,SAACC,GAAD,OARxCC,EAQ6DD,EAAEE,OAAOD,WAP3F3B,EAAWC,MAAM4B,IAAI,CACnBC,MAAOH,IAFW,IAACA,OCCZI,EAAM,WACjB,OACE,yBAAKV,GAAG,SACN,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d9916871.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyAhyLqQJiKLn6LY3ythwFKn91G_mCbiwcw\",\r\n  authDomain: \"game1-23ea0.firebaseapp.com\",\r\n  databaseURL: \"https://game1-23ea0.firebaseio.com\",\r\n  projectId: \"game1-23ea0\",\r\n  storageBucket: \"game1-23ea0.appspot.com\",\r\n  messagingSenderId: \"289286328767\",\r\n  appId: \"1:289286328767:web:e880cfea790a4fef31d10a\",\r\n  measurementId: \"G-LRBKF17E8D\",\r\n};\r\n// Initialize Firebase\r\nvar fireDb = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default fireDb.database();\r\n","import React, { useState, useEffect } from \"react\";\r\nimport firebaseDb from \"./firebase\";\r\n\r\nexport const Textbox = () => {\r\n  const [text, setText] = useState();\r\n\r\n  useEffect(() => {\r\n    firebaseDb\r\n      .ref(\"input/\")\r\n      .once(\"value\")\r\n      .then((snapshot) => {\r\n        setText(snapshot.val());\r\n      });\r\n    firebaseDb.ref(\"input/\").on(\"value\", (snapshot) => {\r\n      setText(snapshot.val());\r\n    });\r\n  });\r\n\r\n  const items = [];\r\n\r\n  const getRandomColor = () => {\r\n    var letters = \"0123456789ABCDEF\";\r\n    var color = \"#\";\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n\r\n  for (var i = 0; i < 20; i++) {\r\n    var x = Math.random() * 5 + 1;\r\n    var divStyle = {\r\n      // left: -x / 5 + \"em\",\r\n      color: getRandomColor(),\r\n      padding: x - 5 + \"rem\",\r\n      margin: x + \"px\",\r\n      fontSize: x + \"em\",\r\n    };\r\n    items.push(<li style={divStyle}>{text}</li>);\r\n  }\r\n  \r\n  return (\r\n    <div id=\"itemsDiv\">\r\n      <ul>{items}</ul>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport firebaseDb from \"./firebase\";\r\n\r\nexport const Input = () => {\r\n  const changeHandler = (value) => {\r\n    firebaseDb.ref().set({\r\n      input: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div id=\"ipDiv\">\r\n      <input className=\"input\" placeholder=\"Type Here\" onChange={(e) => changeHandler(e.target.value)} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Textbox } from \"./Textbox\";\r\nimport { Input } from \"./input.js\";\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div id=\"opDiv\">\r\n      <Textbox />\r\n      <Input />\r\n    </div>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n// <React.StrictMode>\r\n\r\n// </React.StrictMode>,\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}