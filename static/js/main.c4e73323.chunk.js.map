{"version":3,"sources":["firebase.js","Textbox.js","input.js","App.js","serviceWorker.js","index.js"],"names":["fireDb","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","Textbox","useState","text","setText","useEffect","firebaseDb","ref","once","then","snapshot","val","on","items","getRandomColor","color","i","Math","floor","random","x","divStyle","padding","margin","fontSize","push","style","id","Input","className","placeholder","onChange","e","value","target","set","input","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6PAgBeA,G,MAFFC,IAASC,cAXD,CACnBC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKKC,YCbTC,EAAU,WAAO,IAAD,EACHC,qBADG,mBACpBC,EADoB,KACdC,EADc,KAG3BC,qBAAU,WACRC,EACGC,IAAI,UACJC,KAAK,SACLC,MAAK,SAACC,GACLN,EAAQM,EAASC,UAErBL,EAAWC,IAAI,UAAUK,GAAG,SAAS,SAACF,GACpCN,EAAQM,EAASC,aAerB,IAXA,IAAME,EAAQ,GAERC,EAAiB,WAGrB,IAFA,IACIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAHY,mBAGKE,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOJ,GAGAC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAII,EAAoB,EAAhBH,KAAKE,SAAe,EACxBE,EAAW,CAEbN,MAAOD,IACPQ,QAASF,EAAI,EAAI,MACjBG,OAAQH,EAAI,KACZI,SAAUJ,EAAI,MAEhBP,EAAMY,KAAK,wBAAIC,MAAOL,GAAWlB,IAGnC,OACE,yBAAKwB,GAAG,YACN,4BAAKd,KCxCEe,EAAQ,WAOnB,OACE,yBAAKD,GAAG,SACN,2BAAOE,UAAU,QAAQC,YAAY,YAAYC,SAAU,SAACC,GAAD,OARxCC,EAQ6DD,EAAEE,OAAOD,WAP3F3B,EAAWC,MAAM4B,IAAI,CACnBC,MAAOH,IAFW,IAACA,OCCZI,EAAM,WACjB,OACE,yBAAKV,GAAG,SACN,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c4e73323.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyAhyLqQJiKLn6LY3ythwFKn91G_mCbiwcw\",\r\n  authDomain: \"game1-23ea0.firebaseapp.com\",\r\n  databaseURL: \"https://game1-23ea0.firebaseio.com\",\r\n  projectId: \"game1-23ea0\",\r\n  storageBucket: \"game1-23ea0.appspot.com\",\r\n  messagingSenderId: \"289286328767\",\r\n  appId: \"1:289286328767:web:e880cfea790a4fef31d10a\",\r\n  measurementId: \"G-LRBKF17E8D\",\r\n};\r\n// Initialize Firebase\r\nvar fireDb = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default fireDb.database();\r\n","import React, { useState, useEffect } from \"react\";\r\nimport firebaseDb from \"./firebase\";\r\n\r\nexport const Textbox = () => {\r\n  const [text, setText] = useState();\r\n\r\n  useEffect(() => {\r\n    firebaseDb\r\n      .ref(\"input/\")\r\n      .once(\"value\")\r\n      .then((snapshot) => {\r\n        setText(snapshot.val());\r\n      });\r\n    firebaseDb.ref(\"input/\").on(\"value\", (snapshot) => {\r\n      setText(snapshot.val());\r\n    });\r\n  });\r\n\r\n  const items = [];\r\n\r\n  const getRandomColor = () => {\r\n    var letters = \"0123456789ABCDEF\";\r\n    var color = \"#\";\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n\r\n  for (var i = 0; i < 20; i++) {\r\n    var x = Math.random() * 5 + 1;\r\n    var divStyle = {\r\n      // left: -x / 5 + \"em\",\r\n      color: getRandomColor(),\r\n      padding: x - 5 + \"rem\",\r\n      margin: x + \"px\",\r\n      fontSize: x + \"em\",\r\n    };\r\n    items.push(<li style={divStyle}>{text}</li>);\r\n  }\r\n  \r\n  return (\r\n    <div id=\"itemsDiv\">\r\n      <ul>{items}</ul>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport firebaseDb from \"./firebase\";\r\n\r\nexport const Input = () => {\r\n  const changeHandler = (value) => {\r\n    firebaseDb.ref().set({\r\n      input: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div id=\"ipDiv\">\r\n      <input className=\"input\" placeholder=\"Type Here\" onChange={(e) => changeHandler(e.target.value)} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Textbox } from \"./Textbox\";\nimport { Input } from \"./input.js\";\n\nexport const App = () => {\n  return (\n    <div id=\"opDiv\">\n      <Textbox />\n      <Input />\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n// <React.StrictMode>\n\n// </React.StrictMode>,\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}